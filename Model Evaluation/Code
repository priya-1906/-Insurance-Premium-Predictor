import numpy as np
import pandas as pd
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

def _metrics(y_true, y_pred):
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae  = mean_absolute_error(y_true, y_pred)
    r2   = r2_score(y_true, y_pred)
    rl   = np.sqrt(np.mean((np.log1p(np.maximum(y_pred,0)) - np.log1p(np.maximum(y_true,0)))**2))
    return rmse, mae, r2, rl

rows = []

def add_row(name, pred_var):
    if pred_var in globals():
        rmse, mae, r2, rl = _metrics(y_val, globals()[pred_var])
        rows.append([name, rmse, mae, r2, rl])

# Add whatever exists in your session
add_row("LinearRegression",            "pred_val_lr")
add_row("LinReg + log1p(y)",          "pred_val_lrlog")
add_row("RandomForest FULL",          "pred_val_rf_full")
add_row("XGB (plain)",                "pred_val_xgb")
add_row("XGB Tuned (subset best)",    "pred_val_best")
add_row("XGB Tuned FULL DATA",        "pred_val_full")
add_row("XGB + log1p(y) + ES",        "pred_val_xgb_log")
add_row("XGB EarlyStop",              "pred_val_es")

compare_df = pd.DataFrame(rows, columns=["Model","RMSE","MAE","R2","RMSLE"]).sort_values("RMSE")
compare_df.reset_index(drop=True, inplace=True)
compare_df
---------------------------------------------------------------------------
# 1) Choose the winner explicitly
# Example: best_xgb_full (you can replace with ttr_xgb, rf_full, etc.)
FINAL_MODEL = best_xgb_full   

# 2) Refit preprocessor on all train features
X_all_pp = preprocessor.fit_transform(X_full)

# 3) Fit the final model on ALL training data
FINAL_MODEL.fit(X_all_pp, y_full)

# 4) Predict on test set
X_test_pp = preprocessor.transform(X_test)
test_preds = FINAL_MODEL.predict(X_test_pp)

# 5) Build submission DataFrame
sub = sample_submission.copy()
pred_col = next((c for c in sub.columns 
                 if c.lower().startswith("pred") or "premium" in c.lower()), 
                "Premium Amount")
sub[pred_col] = test_preds

# 6) Save as insurance_predictions.csv
sub.to_csv("insurance_predictions.csv", index=False)
print("Saved insurance_predictions.csv  |  shape:", sub.shape)
